@NonCPS
def getVersions(json) {
	def tags = new groovy.json.JsonSlurper().parseText(json).status.tags
	def versions = []
	for (int i = 0; i < tags.size(); i++) {
		versions << tags[i]['tag'].replaceAll("\\-SNAPSHOT","")
	}
	return versions
}

@NonCPS
def next(json) {
	return new groovy.json.JsonSlurper().parseText(json).metadata.labels.next
}

@NonCPS
def recentVersion(List versions) {
	versions.sort( false ) { a, b ->
		[a,b]*.tokenize('.')*.collect { it as int }.with { u, v ->
			[u,v].transpose().findResult{ x,y-> x<=>y ?: null } ?: u.size() <=> v.size()
		}
	}[-1]
}

@NonCPS
def getTestStatus(json) {
	return new groovy.json.JsonSlurper().parseText(json).metadata.labels."test-passed"
}

def testStatus(project) {
	sh "oc get project ${project} -o json > test.json"
	def test = readFile('test.json')
	return getTestStatus(test)
}

def nextProject(project) {
	sh "oc get project ${project} -o json > namespace.json"
	def namespace = readFile('namespace.json')
	return next(namespace)
}

def username() {
    withCredentials([usernamePassword(credentialsId: 'microservices-scrum', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
        return USERNAME
    }
}

def password() {
    withCredentials([usernamePassword(credentialsId: 'microservices-scrum', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
        return PASSWORD
    }
}

def getLatestVersion(product, microservice) {
	sh "oc get is ${microservice} -o json -n ${product} > image.json"
	def image = readFile('image.json')
	def versions = getVersions(image)
	if (versions.size() == 0) {
		error("There are no images for ${microservice}")
	}
	return "${recentVersion(versions)}"
}

node('maven') {

	properties([
	  parameters([
	     string(name: 'GITHUB'), string(name: 'PRODUCT'), string(name: 'REPO'), string(name: 'MICROSERVICE'), string(name: 'PROJECT'),
	  ])
	])

	def prevProject = params.PROJECT
	def project
	def product = params.PRODUCT
	def microservice = params.MICROSERVICE	
	def dbProject = "${params.PRODUCT}-database" 
	def label

	String version
	def pipelines
	
	stage("checkout") {
		git branch: "master", url: "https://${username()}:${password()}@github.com/${params.GITHUB}/${params.REPO}"
	}

	stage ("determine the status of the ${prevProject} environment") {
		testStatus = testStatus prevProject
		println "the ${prevProject} environment test status is $testStatus"
		if (testStatus.equals("false")) error("Cannot promote microservices to ${project} as they have not passed ${prevProject} testing")
	}

	stage("read the pipeline definition") {
		pipelines = readYaml file: "openshift/pipelines/pipelines.yml"
	}

	stage("determine the environment to promote to") {
		project = nextProject prevProject
		label = project.substring(product.length()+1)
		println "the promotion project is ${project}"
		println "the label ${label}"
	}

	stage("determine which image is to be deployed") {
		version = getLatestVersion prevProject, microservice
		println "latest version is $version"
	}

	stage("promote the image from ${prevProject} to ${project}") {
		openshiftTag namespace: prevProject, srcStream: microservice, srcTag: version, destinationNamespace: project, destinationStream: microservice, destinationTag: version
		sh "oc patch is/${microservice} -p '{\"metadata\":{\"labels\":{\"product\":\"${product}\"}}}' -n ${project}"
	}

	stage("remove the deployment, configuration map and secrets") {
		sh "oc delete dc ${microservice} -n ${project} || true"	
		sh "oc delete configmap ${microservice} -n ${project} || true"
		sh "oc delete secret ${microservice} -n ${project} || true"	
	}

	stage("create the configuration map") {
		def yml = readYaml file: "openshift/configuration/${label}-config.yml"
		def configMap = yml.config_map
		def mapStr = ""
		configMap.each { config ->
			mapStr = "${mapStr} --from-literal=${config.name}=${config.value}"
		}
		sh "oc create configmap ${microservice} ${mapStr} -n ${project}"
	}

	if (fileExists("openshift/configuration/${label}-secret.yml")) {
		stage("create the secrets") {
			def yml = readYaml file: "openshift/configuration/${label}-secret.yml"
			def secrets = yml.secrets
			def mapStr = ""
			secrets.each { secret ->
				mapStr = "${mapStr} --from-literal=${secret.name}=${secret.value}"
			}
			sh "oc create secret generic ${microservice} ${mapStr} -n ${project}"
		}
	}

	stage("reset test flags for ${project}") {
		sh "oc label namespace ${project} test-passed=false --overwrite=true"	
	}

	if (pipelines.release.db) {
		stage("prepare the database") {
			withMaven(mavenSettingsConfig: 'microservices-scrum') {
		      sh "mvn clean package -P prepare-db -Dmaven.test.skip=true -Dproject=${project} -Ddb.project=${dbProject}"
		    } 
		}	
	}		

	stage("read the resource definition") {
		if (fileExists("openshift/configuration/${label}-resources.yml")) {
			def yml = readYaml file: "openshift/configuration/${label}-resources.yml"
			resources = yml.resources
		} else {
			def yml = readYaml file: "openshift/configuration/default-resources.yml"
			resources = yml.resources
		}
	}

	stage("create deployment config") {
		sh "oc process -n ${project} -f openshift/templates/${microservice}-config.yml -p NAMESPACE=${project} -p DOCKER_NAMESPACE=${project} -p DOCKER_IMAGE_LABEL=${version} -p PRODUCT=${product} -p MAX_MEMORY=${resources.max_memory} -p MIN_MEMORY=${resources.min_memory} -p MAX_CPU=${resources.max_cpu} -p MIN_CPU=${resources.min_cpu} -p REPLICAS=${resources.replicas} | oc apply -f -"
	}

	stage("execute deployment to ${project}") {
		openshiftDeploy namespace: project, depCfg: microservice,  waitTime: "3000000"
		openshiftVerifyDeployment namespace: project, depCfg: microservice, replicaCount:"1", verifyReplicaCount: "true", waitTime: "300000" 
	}
	
}