@NonCPS
def getVersions(json) {
	def tags = new groovy.json.JsonSlurper().parseText(json).status.tags
	def versions = []
	for (int i = 0; i < tags.size(); i++) {
		versions << tags[i]['tag'].replaceAll("\\-SNAPSHOT","")
	}
	return versions
}

@NonCPS
def recentVersion(List versions) {
	versions.sort( false ) { a, b ->
		[a,b]*.tokenize('.')*.collect { it as int }.with { u, v ->
			[u,v].transpose().findResult{ x,y-> x<=>y ?: null } ?: u.size() <=> v.size()
		}
	}[-1]
}

def username() {
    withCredentials([usernamePassword(credentialsId: 'microservices-scrum', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
        return USERNAME
    }
}

def password() {
    withCredentials([usernamePassword(credentialsId: 'microservices-scrum', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
        return PASSWORD
    }
}

def getLatestVersion(product, microservice) {
	sh "oc get is ${microservice} -o json -n ${product}-cicd > image.json"
	def image = readFile('image.json')
	def versions = getVersions(image)
	if (versions.size() == 0) {
		error("There are no images for ${microservice}")
	}
	return "${recentVersion(versions)}-SNAPSHOT"
}

node('maven') {

	properties([
	  parameters([
	     string(name: 'GITHUB'), string(name: 'PRODUCT'), string(name: 'REPO'), string(name: 'MICROSERVICE'),
	  ]),
	  disableConcurrentBuilds()
	])

	def project = "${params.PRODUCT}-test"
	def microservice = params.MICROSERVICE	
	def dbProject = "${params.PRODUCT}-database"

	String version
	def developmentVersion
	def releaseVersion
	def pipelines
	def resources
	boolean skipStages = false
	
	stage("checkout") {
		git branch: "master", url: "https://${username()}:${password()}@github.com/${params.GITHUB}/${params.REPO}"
	}

	stage("read the pipeline definition") {
		pipelines = readYaml file: "openshift/pipelines/pipelines.yml"
	}

	stage ("verify build image") {
		version = getLatestVersion(params.PRODUCT, microservice)
		println "latest version is $version"
		def pom = readFile('pom.xml')
		def matcher = new XmlSlurper().parseText(pom).version =~ /(\d+\.\d+\.)(\d+)(\-SNAPSHOT)/
		String pomVersion = "${matcher[0][1]}${matcher[0][2].toInteger()}-SNAPSHOT"
		if (!version.equals(pomVersion)) {
			println "Source version ${pomVersion} does not match last build image version ${version}. Perhaps ${pomVersion} has already been released?"
			currentBuild.result = 'SUCCESS'
			skipStages = true
		}
	}

	if (!skipStages) {

		stage("remove the deployment, configuration map and secrets") {
			sh "oc delete dc ${microservice} -n ${project} || true"	
			sh "oc delete configmap ${microservice} -n ${project} || true"
			sh "oc delete secret ${microservice} -n ${project} || true"	
		}

		stage("create the configuration map") {
			def yml = readYaml file: "openshift/configuration/test-config.yml"
			def configMap = yml.config_map
			def mapStr = ""
			configMap.each { config ->
				mapStr = "${mapStr} --from-literal=${config.name}=${config.value}"
			}
			sh "oc create configmap ${microservice} ${mapStr} -n ${project}"
		}

		if (fileExists("openshift/configuration/test-secret.yml")) {
			stage("create the secrets") {
				def yml = readYaml file: "openshift/configuration/test-secret.yml"
				def secrets = yml.secrets
				def mapStr = ""
				secrets.each { secret ->
					mapStr = "${mapStr} --from-literal=${secret.name}=${secret.value}"
				}
				sh "oc create secret generic ${microservice} ${mapStr} -n ${project}"
			}
		}

		if (pipelines.release.db) {
			stage("prepare the database") {
				withMaven(mavenSettingsConfig: 'microservices-scrum') {
			      sh "mvn clean package -P prepare-db -Dmaven.test.skip=true -Dproject=${project} -Ddb.project=${dbProject}"
			    } 
			}	
		}	

		stage("increment version") {
			def pom = readFile('pom.xml');
			def matcher = new XmlSlurper().parseText(pom).version =~ /(\d+\.\d+\.)(\d+)(\-SNAPSHOT)/
			developmentVersion = "${matcher[0][1]}${matcher[0][2].toInteger()+1}-SNAPSHOT"
			releaseVersion = "${matcher[0][1]}${matcher[0][2]}"
		}

		stage("perform release") {
	    sh "git config --global user.email \"jenkins@estafet.com\""
	  	sh "git config --global user.name \"jenkins\""
	    withMaven(mavenSettingsConfig: 'microservices-scrum') {
				sh "mvn release:clean release:prepare release:perform -DreleaseVersion=${releaseVersion} -DdevelopmentVersion=${developmentVersion} -DpushChanges=false -DlocalCheckout=true -DpreparationGoals=initialize -B"
				sh "git push origin master"
				sh "git tag ${releaseVersion}"
				sh "git push origin ${releaseVersion}"
			} 
		}	

		stage("promote the image from ${params.PRODUCT}-cicd to ${project}") {
			openshiftTag namespace: "${params.PRODUCT}-cicd", srcStream: microservice, srcTag: version, destinationNamespace: project, destinationStream: microservice, destinationTag: releaseVersion
			sh "oc patch is/${microservice} -p '{\"metadata\":{\"labels\":{\"product\":\"${params.PRODUCT}\"}}}' -n ${project}"
		}

		stage("reset test flags for ${project}") {
			sh "oc label namespace ${project} test-passed=false --overwrite=true"	
		}

		stage("read the resource definition") {
			if (fileExists("openshift/config/test-resources.yml")) {
				def yml = readYaml file: "openshift/configuration/test-resources.yml"
				resources = yml.resources
			} else {
				def yml = readYaml file: "openshift/configuration/default-resources.yml"
				resources = yml.resources
			}
		}

		stage("create deployment config") {
			sh "oc process -n ${project} -f openshift/templates/${microservice}-config.yml -p NAMESPACE=${project} -p DOCKER_NAMESPACE=${project} -p DOCKER_IMAGE_LABEL=${releaseVersion} -p PRODUCT=${params.PRODUCT} -p MAX_MEMORY=${resources.max_memory} -p MIN_MEMORY=${resources.min_memory} -p MAX_CPU=${resources.max_cpu} -p MIN_CPU=${resources.min_cpu} -p REPLICAS=${resources.replicas} | oc apply -f -"
		}

		stage("execute deployment") {
			openshiftDeploy namespace: project, depCfg: microservice,  waitTime: "3000000"
			openshiftVerifyDeployment namespace: project, depCfg: microservice, replicaCount:"1", verifyReplicaCount: "true", waitTime: "300000" 
		}

	}

}

